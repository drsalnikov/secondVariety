@page "/scheduler"
@using System.Linq.Dynamic.Core
@using System.ComponentModel.DataAnnotations
@using SecondVariety.Models
@using Object = SecondVariety.Models.Object

@inject NavigationManager nav
@inject GrpcClientService grpcClient
@inject DialogService dialogService

<div class="row gap-3">
  <div class="col">
    <RadzenFieldset Text="План работ" class="gap-3">
      <RadzenScheduler 
          @ref=@scheduler
          style="height: 900px;"
          SlotRender=@OnSlotRender  
          TItem="Request" 
          Data=@requests
          StartProperty="DateFromFakt"
          EndProperty="DateToFakt"
          TextProperty="Comment"
          SelectedIndex="3"
          SlotSelect=@OnSlotSelect 
          AppointmentSelect=@OnAppointmentSelect 
          AppointmentRender=@OnAppointmentRender>
        <RadzenWeekView />
        <RadzenMonthView />
      </RadzenScheduler>
    </RadzenFieldset>
  </div>
</div>


@code {
  [CascadingParameter]
  private Task<AuthenticationState> authenticationStateTask { get; set; }

  private System.Security.Claims.ClaimsPrincipal? User;
  RadzenScheduler<Request>? scheduler;
  EventConsole console;
  Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
  IList<Request> requests;

  /*
  *     IList<Appointment> appointments = new List<Appointment>
       {
       new Appointment { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "Birthday" },
       new Appointment { Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Text = "Day off" },
       new Appointment { Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Text = "Work from home" },
       new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Text = "Online meeting" },
       new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(13), Text = "Skype call" },
       new Appointment { Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Text = "Dentist appointment" },
       new Appointment { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "Vacation" },
  };
  */

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    requests = grpcClient.GetRequests().ToList();
  }

  void OnSlotRender(SchedulerSlotRenderEventArgs args)
  {
    // Highlight today in month view
    if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
    {
      args.Attributes["style"] = "background: rgba(255,220,40,.2);";
    }

    // Highlight working hours (9-18)
    if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
    {
      args.Attributes["style"] = "background: rgba(255,220,40,.2);";
    }
  }

  async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
  {

    Request data = await dialogService.OpenAsync<AddNewRequest>("Add Appointment",
        new Dictionary<string, object> { { "DateFromFakt", args.Start }, { "DateToFakt", args.End } });

    User = (await authenticationStateTask).User;

    if (!User.IsInRole("Administrator") && !User.IsInRole("Manager"))
    {
      return;
    }

    if (data != null)
    {
      requests.Add(data);
      grpcClient.AddRequest(data);

      await scheduler.Reload();
    }
  }

  async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Request> args)
  {

    await dialogService.OpenAsync<EditRequest>("Edit Appointment", new Dictionary<string, object> { { "Request", args.Data } });

    await scheduler.Reload();
  }

  void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Request> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

    }
}