@page "/requests/edit/{Id:long}"

@using System.Linq.Dynamic.Core
@using SecondVariety.Models;
@using Microsoft.EntityFrameworkCore

@inject NavigationManager nav
@inject GrpcClientService grpcClient 


  <h1>Редактировать заявку</h1>
  <RadzenTemplateForm TItem="Request" Data="@newRequest" Submit="@OnSubmit" >
    <div class="row gap-3">
      <RadzenFieldset Text="Действия" class="gap-3">
        <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Сохранить" />
        <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Выйти" Click="@Cancel" />
      </RadzenFieldset>
    </div>
    <div class="row gap-3">
      <div class="col">
        <RadzenFieldset>
          <div class="row">
            <div class="col">
                <RadzenLabel Text="Номер заявки:" />
                <RadzenNumeric Disabled TValue="int" @bind-Value=@newRequest.Num />
            </div>
            <div class="col">
                <RadzenLabel Text="Дата заявки:" />
                <RadzenDatePicker TValue="DateTime?" @bind-Value=@newRequest.Data DateFormat="d" Name="Data" />
                <RadzenRequiredValidator Component="Data" Text="Дата заявки является обязательным полем" />
            </div>
            <div class="col">
                <RadzenLabel Text="Статус" />
            </div>
            <div class="col">
              <RadzenDropDown Change="@OnStatusChange"
                @bind-Value="ReqStatus" 
                Data="@(Enum.GetValues(typeof(StatusTypes)))" > 
              </RadzenDropDown>
            </div>
          </div>
          <div class="row">
            <RadzenDropDownDataGrid 
              Name="object"
              @bind-SelectedValue="@objectValue"
              TValue="string"
              FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
              AllowFiltering="true" 
              AllowClear="true"
              Data=@objects
              AllowColumnResize="true"
              Count="@count"
              Change="@OnChange"
              TextProperty="Name"
              ValueProperty="Id"
              PageSize="10"
              AllowFilteringByAllStringColumns="true">
                <Columns>
                    <RadzenDropDownDataGridColumn Property="Kod" Title="Код" />
                    <RadzenDropDownDataGridColumn Property="Name" Title="Имя" />
                </Columns>
            </RadzenDropDownDataGrid>
            <RadzenRequiredValidator Component="object" Text="Выбор объекта при создании заявки является обязательным" />
          </div>
          <div class="row">
            <div class="col">
              <RadzenLabel Text="Дата начала работ(план):" />
              <RadzenDatePicker @bind-Value=@newRequest.DateFrom DateFormat="d" Name="DateFrom" />
              <RadzenRequiredValidator Component="DateFrom" Text="Дата начала работ(план) является обязательным" />
            </div>
            <div class="col ">
              <RadzenLabel Text="Дата окончания работ(план):" />
              <RadzenDatePicker @bind-Value=@newRequest.DateTo DateFormat="d" Name="DateTo" />
              <RadzenRequiredValidator Component="DateTo" Text="Дата окончания работ(план) является обязательным" />
            </div>
          </div>
          <div class="row">
            <div class="col">
              <RadzenLabel Text="Дата начала работ(факт):" />
              <RadzenDatePicker @bind-Value=@newRequest.DateFromFakt DateFormat="d" Name="DateFromFakt" />
              <RadzenRequiredValidator Component="DateFromFakt" Text="Дата начала работ(факт) является обязательным" />
            </div>
            <div class="col ">
              <RadzenLabel Text="Дата окончания работ(факт):" />
              <RadzenDatePicker @bind-Value=@newRequest.DateToFakt DateFormat="d" Name="DateToFakt" />
              <RadzenRequiredValidator Component="DateToFakt" Text="Дата окончания работ(факт) является обязательным" />
            </div>
          </div>
          <div class="row">
            <RadzenLabel Text="Комментарий:" />
            <RadzenTextArea @bind-Value=@newRequest.Comment />
          </div>
        </RadzenFieldset>
      </div>
    </div>
  </RadzenTemplateForm>

@code {
  [Parameter]
  public long Id { get; set; }

  [CascadingParameter]
  private Task<AuthenticationState> authenticationStateTask { get; set; }
  private System.Security.Claims.ClaimsPrincipal? User ;
  private string? objectValue;
  private Request newRequest = new Request();
  private Models.StatusTypes ReqStatus =  Models.StatusTypes.Agreed;
  private IEnumerable<SecondVariety.Models.Object> objects = Enumerable.Empty<SecondVariety.Models.Object>();
  int count;
  //int lastnumber;

  EventConsole console;

  protected override async Task OnInitializedAsync()
  {
 /*   newRequest = db1context.Requests.FirstOrDefault(o => o.Num == Num);
    if(newRequest != null)
    {
      objectValue = db1context.Objects
        .Where(o => o.Kod == newRequest.KodObject)
        .Select(o => o.Name)
        .FirstOrDefault();
    }
    */
    User = (await authenticationStateTask).User;
    if(User==null && !User.Identity.IsAuthenticated) 
        return ;
    if(!User.IsInRole("Administrator")&&!User.IsInRole("Manager"))
       return ;

    var req = grpcClient.GetRequestById(Id) ;

    if(req!=null)
    {
      newRequest = req ;
      if(req.KodObject!=null)
        objectValue = grpcClient.GetObjectById(req.KodObject??0).Name ;   

      ReqStatus = (Models.StatusTypes)(newRequest.Status??0) ;      
    }

    await base.OnInitializedAsync();
    await LoadData();
  }

  void OnStatusChange(object args)
  {
    if (args is Models.StatusTypes)
    {
      newRequest.Status = (int)args;
    }
  }

  void OnChange(object args)
  {
    if (args is int)
    {
      newRequest.KodObject = (int)args;
    }
  }

  void Cancel()
  {
    nav.NavigateTo("/requests", false);
  }

  async Task LoadData()
  {
     // objects = objects = db1context.Objects.OrderBy(o => o.Kod).AsQueryable();
     // count = objects.Count();
      objects = grpcClient.GetObjects().OrderBy(o=>o.Kod) ; 
      await InvokeAsync(StateHasChanged);
  }

  void OnSubmit(Request arg)
  {
     // db1context.Requests.Update(arg);
     // db1context.SaveChanges();
      grpcClient.UpdateRequest(arg) ;
      if(User.IsInRole("Administrator"))
      {
        nav.NavigateTo($"/objects/edit/{arg.KodObject}", false);
      }
      else
      {
        nav.NavigateTo($"/requests", false);
      }
  }
}
