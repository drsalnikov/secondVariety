@page "/requests"

@using Microsoft.EntityFrameworkCore
@using SecondVariety.Models;
@using SecondVariety.Data;

@inject NavigationManager nav
@inject db1Context db1context
@inject ContextMenuService ContextMenuService

  <h1>Заявки</h1>
  <div class="row gap-3">
    <RadzenFieldset Text="Действия" class="gap-3">
      <RadzenButton 
        Click=@OnAddNewClick
        Text="Создать" 
        Icon="add_circle_outline" 
        ButtonStyle="ButtonStyle.Primary" />
    </RadzenFieldset>
  </div>
  <div class="row gap-3">
    <RadzenDataGrid 
              AllowFiltering="true" 
              AllowSorting="true" 
              PageSize="10" 
              ShowPagingSummary="true"
              Data="@myRequests" 
              TItem="RequestDTO" 
              ColumnWidth="480px" 
              IsLoading="@isLoading"
              SelectionMode="DataGridSelectionMode.Single" 
              @bind-Value=@selectedRequest 
              CellContextMenu="@OnCellContextMenu"
              >
              <Columns>
                  <RadzenDataGridColumn TItem="RequestDTO" Property="Num" Title="Номер" Width="75px" TextAlign="TextAlign.Center" />
                  <RadzenDataGridColumn TItem="RequestDTO" Property="Data" Title="Дата" FormatString="{0:d}" Width="150px" />
                  <RadzenDataGridColumn TItem="RequestDTO" Property="KodObject" Title="Код объекта" Width="75px"/>
                  <RadzenDataGridColumn TItem="RequestDTO" Property="NameObject" Title="Наименование объекта" Width="150px"/>
                  <RadzenDataGridColumn TItem="RequestDTO" Property="DateFrom" Title="Дата начала работ(план)" FormatString="{0:d}" Width="150px"/>
                  <RadzenDataGridColumn TItem="RequestDTO" Property="DateTo" Title="Дата окончания работ(план)" FormatString="{0:d}" Width="150px"/>
                  <RadzenDataGridColumn TItem="RequestDTO" Property="DateFromFakt" Title="Дата начала работ(факт)" FormatString="{0:d}" Width="150px"/>
                  <RadzenDataGridColumn TItem="RequestDTO" Property="DateToFakt" Title="Дата окончания работ(факт)" FormatString="{0:d}" Width="150px"/>
                  <RadzenDataGridColumn TItem="RequestDTO" Property="Status" Title="Статус" Width="75px" />
              </Columns>
    </RadzenDataGrid>
  </div>
  <div class="row gap-3">
    <RadzenCard class="console-message">
      <span class="console-message-text">*Для редактирования таблицы, используйте правую кнопку мыши.</span>
    </RadzenCard>
  </div>

@code {
  //EventConsole console;

  private IEnumerable<RequestDTO> myRequests = Enumerable.Empty<RequestDTO>();
  //private IEnumerable<Request> requests = Enumerable.Empty<Request>();

  private bool isLoading;
  //private int countRequests;
  IList<RequestDTO> selectedRequest;

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    await LoadData();
  }

  async Task LoadData()
  {
    isLoading = true;

    await Task.Yield();

    myRequests = (from r in db1context.Requests
                  join o in db1context.Objects on r.KodObject equals o.Kod
                  select new RequestDTO
                 {
                   Num = r.Num,
                   Data = r.Data,
                   KodObject = r.KodObject,
                   NameObject = o.Name,
                   DateFrom = r.DateFrom,
                   DateTo = r.DateTo,
                   DateFromFakt = r.DateFromFakt,
                   DateToFakt = r.DateToFakt,
                   Status = r.Status
                 })
                 .OrderBy(o => o.Num)
                 .AsEnumerable();


    //countRequests = requests.Count();

    isLoading = false;

  }

  void OnAddNewClick()
  {
    nav.NavigateTo("/requests/new", true);
  }

  void Submit(RequestDTO arg)
  {
    //console.Log(arg);
  }

  void DeleteRequest(int? num)
  {
    if (!num.HasValue)
      return;

    Request? req = db1context.Requests.FirstOrDefault(r => r.Num == num);
    if (req != null)
    {
      db1context.Requests.Remove(req);
      db1context.SaveChanges();
    }

    nav.NavigateTo("/requests", true);
  }


  void OnCellContextMenu(DataGridCellMouseEventArgs<RequestDTO> args)
  {
    selectedRequest = new List<RequestDTO>() { args.Data };

    ContextMenuService.Open(args,
        new List<ContextMenuItem> {
              new ContextMenuItem(){ Text = "Редактировать", Value = 1 },
              new ContextMenuItem(){ Text = "Удалить", Value = 2 },
          }, 
          (e) => { 
            switch (e.Value)
            {
              case 1:
                nav.NavigateTo($"/requests/edit/{args.Data.Num}", true);
                break;
              case 2:
                DeleteRequest(args.Data.Num);
                break;
            }

            //console.Log($"e: {e.Value}. args: {args.Data.Num}."); 
          }
        );
    }

  }