@page "/telemetry"

@using System.Linq.Dynamic.Core
@using Microsoft.EntityFrameworkCore
@using SecondVariety.Models
@using Object = SecondVariety.Models.Object

@inject NavigationManager nav
@inject GrpcClientService grpcClient
@inject NotificationService NotificationService

<h1>Анализ телеметрии по объекту</h1>

<div class="row gap-3">
  <RadzenFieldset Text="Действия" class="gap-3">
    <RadzenButton Click=@ShowChart Text="Выполнить анализ" Disabled=@isDisabled() Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
  </RadzenFieldset>
</div>

<div class="row gap-3">
  <RadzenFieldset Text="Объект" class="gap-3">
    <RadzenDropDownDataGrid Name="Object"
        Style="width: 100%"
        TValue="int" 
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
        AllowFiltering="true"
        AllowClear="true"
        Data=@objects
        AllowColumnResize="true"
        Count="@count"
        Change="@OnChange"
        TextProperty="Name"
        ValueProperty="Id"
        PageSize="20"
        Placeholder="Выберите объект"
        SearchText="Поиск"
        AllowFilteringByAllStringColumns="true">
      <Columns>
        <RadzenDropDownDataGridColumn Property="Kod" Title="Код" />
        <RadzenDropDownDataGridColumn Property="Name" Title="Имя" />
      </Columns>
    </RadzenDropDownDataGrid>
    <RadzenRequiredValidator Component="Object" Text="Выбор объекта для формирования графика телеметрии является обязательным" />
  </RadzenFieldset>
</div>

<div class="row gap-3">
  <RadzenFieldset Visible=@(selected != null) Text="Описание" class="gap-3">
    <p>Описание выявленного сценария @selected?.WarningType. </p>
  </RadzenFieldset>
</div>

<div class="row gap-3" >
  <RadzenFieldset Text="Построение графика" class="gap-3" Visible="@isLoading">
    <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" Visible="@isLoading" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
  </RadzenFieldset>
</div>

<div class="row gap-3" >
  <RadzenFieldset Text="@TeleMetr1Title" class="gap-3" Visible="@WarVisible">
    <RadzenChart Visible="@WarVisible">
        <RadzenLegend Position="LegendPosition.Top" />
        <RadzenLineSeries Smooth="true" Data="@Telemetries" CategoryProperty="Period" Title="@TeleMetr1Title" ValueProperty="Value" RenderingOrder="1">
          <RadzenSeriesTrendLine Visible="true" Stroke="red" LineType="LineType.Solid" />
        </RadzenLineSeries>
        <RadzenCategoryAxis Padding="20" Formatter="@FormatAsTime" />
        <RadzenValueAxis Formatter="@FormatAsVal">
          <RadzenGridLines Visible="true" />
          <RadzenAxisTitle Text="Значение" />
        </RadzenValueAxis>
      </RadzenChart>
  </RadzenFieldset>
</div>

<div class="row gap-3" >
  <RadzenFieldset Text="@TeleMetr2Title" class="gap-3" Visible="@War4Visible">
    <RadzenChart >
      <RadzenLegend Position="LegendPosition.Top" />
      <RadzenLineSeries Smooth="true" Data="@Telemetries1" CategoryProperty="Period" Title="@TeleMetr2Title" ValueProperty="Value" RenderingOrder="1">
        <RadzenSeriesTrendLine Visible="true" Stroke="red" LineType="LineType.Solid" />
      </RadzenLineSeries>
      <RadzenCategoryAxis Padding="20" Formatter="@FormatAsTime" />
      <RadzenValueAxis Formatter="@FormatAsVal">
        <RadzenGridLines Visible="true" />
        <RadzenAxisTitle Text="Значение" />
      </RadzenValueAxis>
    </RadzenChart>
  </RadzenFieldset>
</div>

@code 
{
  //[Parameter] public long Id { get; set; }
  //[Parameter] public string DateTStr { get; set; }
  //[Parameter] public string DateTEtr { get; set; }
  //[Parameter] public int War4 { get; set; }
  //[Parameter] public int ObjKod { get; set; }
  private IEnumerable<Object> objects = Enumerable.Empty<Object>();
  private int count;
  private Object? selected;

  private bool isLoading = false;

  public DateTime DateT { get; set; }
  public string HeaderStr {get; set; }
  public string TeleMetr1Title {get; set; }
  public string TeleMetr2Title {get; set; }

  public bool War4Visible {get; set; } = false ;
  public bool WarVisible {get; set; } = false;

  List<Models.Telemetry> Telemetries  {get;set;} = new List<Models.Telemetry>();
  List<Models.Telemetry> Telemetries1 {get;set;} = new List<Models.Telemetry>();

  protected override async Task OnInitializedAsync()
  {
    var objs = grpcClient.GetObjects();
    objects = objs.OrderBy(o => o.Kod);
    count = objects.Count();
    await Task.Yield();
  }

  void OnChange(object args)
  {
    if (args is int)
    {
      int id = Convert.ToInt32(args);
      selected = objects.FirstOrDefault(o => o.Id == id);

      ShowMessage(String.Format("Выбран {0}", selected?.Name));
    }
  }

  void ShowMessage(string text)
  {
    var message = new NotificationMessage
      {
        Severity = NotificationSeverity.Success,
        Summary = "Сообщение",
        Detail = String.Format("{0}", text),
        Duration = 10000
      };

    NotificationService.Notify(message);
  }

  void ShowMessageError(string text)
  {
    var message = new NotificationMessage
    {
      Severity = NotificationSeverity.Error,
      Summary = "Ошибка",
      Detail = String.Format("{0}", text),
      Duration = 10000
    };

    NotificationService.Notify(message);
  }

  async Task ShowChart()
  {
    isLoading = true;

    DateTime startDate;
    DateTime endDate;
    bool warning4 = false;

    if (selected == null || selected.Kod < 0)
    {
      return;
    }

    await grpcClient.TelemetryTrainingObj(selected.Kod);
    await grpcClient.CheckingTrainingObj(selected.Kod);

    if (selected.WarningType.HasValue && selected.WarningType.Value > 0)
    {
      startDate = selected.WarningTime ?? DateTime.Now;
      endDate = startDate.AddMinutes(60);
      warning4 = (selected.WarningType == 4);
    }
    else
    {
      startDate = DateTime.Now;
      endDate = startDate.AddHours(2);
    }

    Telemetries = new List<Models.Telemetry>();
    Telemetries1 = new List<Models.Telemetry>();

    WarVisible = false;
    War4Visible = false;

    try
    {
      if (!warning4)
      {
       // var tt = grpcClient.GetTelemetryServPeriodByObjKod(startDate, endDate, selected.Kod);
        var tt = grpcClient.GetTelemetryDataById(selected.Id);

        if (tt != null && tt.Count() > 0)
        {
          startDate = tt.Select(tttt => tttt?.Period??DateTime.MinValue).Min(); 
          endDate = tt.Select(tttt => tttt?.Period??DateTime.MaxValue).Max(); 
          HeaderStr = $"Телеметрия c {startDate.ToShortDateString()} {startDate.ToShortTimeString()} по {endDate.ToShortDateString()} {endDate.ToShortTimeString()} для объекта №{selected.Kod}";
          TeleMetr1Title = HeaderStr;
          Telemetries.AddRange(tt.OrderBy(ttt => ttt.Period));
          Telemetries1.Add(new Models.Telemetry { Period = DateTime.Now, Value = 0 });
          WarVisible = true;
          isLoading = false;
          return;
        }
      }
    }
    catch(Exception e)
    {
      ShowMessageError(e.Message);
    }

    try
    {
      if (warning4)
      {
        var tt = grpcClient.GetWarning4(startDate, endDate, selected.Kod);

        if (tt.Item1 != null && tt.Item1.Count() > 0 && tt.Item2 != null && tt.Item2.Count() > 0)
        {
          HeaderStr = $"Телеметрия c {startDate.ToShortDateString()} {startDate.ToShortTimeString()} по {endDate.ToShortDateString()} {endDate.ToShortTimeString()} для объекта №{selected.Kod} Type1";
          TeleMetr1Title = HeaderStr;

          Telemetries.AddRange(tt.Item1.OrderBy(ttt => ttt.Period));
          Telemetries1.AddRange(tt.Item2.OrderBy(ttt => ttt.Period));
          TeleMetr2Title = "Телеметрия Type2";
          War4Visible = true;
          isLoading = false;
          return;
        }
      }
    }
    catch(Exception e)
    {
      ShowMessageError(e.Message);
    }

    Telemetries1.Add(new Models.Telemetry { Period = DateTime.Now, Value = 0 });
    Telemetries.Add(new Models.Telemetry { Period = DateTime.Now, Value = 0 });
    HeaderStr = $"Нет данных телеметрии для объекта №{selected.Name}";
    TeleMetr1Title = HeaderStr;
    WarVisible = true;
    isLoading = false;
  }

  bool isDisabled()
  {
    return selected == null;
  }

  string DateTimeToBase64(DateTime dt)
  {
    var dbytes = System.Text.Encoding.UTF8.GetBytes(dt.ToString());
    var dbased = Convert.ToBase64String(dbytes);
    return dbased;
  }

  DateTime DateTimeFromBase64(string strBased)
  {
      var dbytes = System.Convert.FromBase64String(strBased);
      var dstr = System.Text.Encoding.UTF8.GetString(dbytes);
      return DateTime.Parse(dstr);
  }

  string GetDate()
  {
      return DateT.ToShortDateString();
  }

  string FormatAsTime(object value)
  {
      if (value is DateTime)
      {
          return ((DateTime)(value)).ToShortTimeString();
      }
      return "";
  }

  string FormatAsVal(object value)
  {
      if (value is float)
      {
          return $"{value}";
      }
      return "";
  }
}