@page "/requests"

@using Microsoft.EntityFrameworkCore
@using SecondVariety.Models;


@inject NavigationManager nav

@inject ContextMenuService ContextMenuService
@inject GrpcClientService grpcClient 

  <h1>Заявки</h1>
  <div class="row gap-3">
    <RadzenFieldset Text="Действия" class="gap-3">
      <RadzenButton 
        Click=@OnAddNewClick
        Text="Создать" 
        Icon="add_circle_outline" 
        ButtonStyle="ButtonStyle.Primary" />
    </RadzenFieldset>
  </div>
  <div class="row gap-3">
    <RadzenDataGrid 
              AllowFiltering="true" 
              AllowSorting="true" 
              PageSize="10" 
              ShowPagingSummary="true"
              Data="@myRequests" 
              TItem="RequestDTO" 
              ColumnWidth="480px" 
              IsLoading="@isLoading"
              SelectionMode="DataGridSelectionMode.Single" 
              @bind-Value=@selectedRequest 
              CellContextMenu="@OnCellContextMenu"
              >
              <Columns>
                  <RadzenDataGridColumn TItem="RequestDTO" Property="Num" Title="Номер" Width="75px" TextAlign="TextAlign.Center" />
                  <RadzenDataGridColumn TItem="RequestDTO" Property="Data" Title="Дата" FormatString="{0:d}" Width="150px" />
                  <RadzenDataGridColumn TItem="RequestDTO" Property="KodObject" Title="Код объекта" Width="75px"/>
                  <RadzenDataGridColumn TItem="RequestDTO" Property="NameObject" Title="Наименование объекта" Width="150px"/>
                  <RadzenDataGridColumn TItem="RequestDTO" Property="DateFrom" Title="Дата начала работ(план)" FormatString="{0:d}" Width="150px"/>
                  <RadzenDataGridColumn TItem="RequestDTO" Property="DateTo" Title="Дата окончания работ(план)" FormatString="{0:d}" Width="150px"/>
                  <RadzenDataGridColumn TItem="RequestDTO" Property="DateFromFakt" Title="Дата начала работ(факт)" FormatString="{0:d}" Width="150px"/>
                  <RadzenDataGridColumn TItem="RequestDTO" Property="DateToFakt" Title="Дата окончания работ(факт)" FormatString="{0:d}" Width="150px"/>
                  <RadzenDataGridColumn TItem="RequestDTO" Property="Status" Title="Статус" Width="75px" />
              </Columns>
    </RadzenDataGrid>
  </div>
  <div class="row gap-3">
    <RadzenCard class="console-message">
      <span class="console-message-text">*Для редактирования таблицы, используйте правую кнопку мыши.</span>
    </RadzenCard>
  </div>

@code {
  //EventConsole console;
 [CascadingParameter]
 private Task<AuthenticationState> authenticationStateTask { get; set; }
 private System.Security.Claims.ClaimsPrincipal? User ;
 private IEnumerable<RequestDTO> myRequests = Enumerable.Empty<RequestDTO>();
 //private IEnumerable<Request> requests = Enumerable.Empty<Request>();

 private bool isLoading;
 //private int countRequests;
 IList<RequestDTO> selectedRequest;

 protected override async Task OnInitializedAsync()
 {
   await base.OnInitializedAsync();
   await LoadData();
 }

 async Task LoadData()
 {
   isLoading = true;

   await Task.Yield();
   User = (await authenticationStateTask).User;
   var reqs = grpcClient.GetRequests() ;
   var objs = grpcClient.GetObjects() ;

   myRequests = (from r in reqs
                 join o in objs on r.KodObject equals o.Id
                 select new RequestDTO
                {
                  Num = r.Num,
                  Data = r.Data,
                  KodObject = r.KodObject,
                  NameObject = o.Name??"",
                  DateFrom = r.DateFrom,
                  DateTo = r.DateTo,
                  DateFromFakt = r.DateFromFakt,
                  DateToFakt = r.DateToFakt,
                  Status = (Models.StatusTypes)(r.Status??0),
                  Id = r.Id
                })
                .OrderBy(o => o.Num)
                .AsEnumerable();


   //countRequests = myRequests.Count();

   isLoading = false;

 }

 void OnAddNewClick()
 {
   nav.NavigateTo("/requests/new", true);
 }

 void Submit(RequestDTO arg)
 {
   //console.Log(arg);
 }

 void DeleteRequest(long? num)
 {
   if (!num.HasValue)
     return;

   /*Request? req = db1context.Requests.FirstOrDefault(r => r.Num == num);
   if (req != null)
   {
     db1context.Requests.Remove(req);
     db1context.SaveChanges();
   }
*/
   if(num!=null)
     grpcClient.DeleteRequest(num??-1) ;

   nav.NavigateTo("/requests", true);
 }


 void OnCellContextMenu(DataGridCellMouseEventArgs<RequestDTO> args)
 {
   selectedRequest = new List<RequestDTO>() { args.Data };

   ContextMenuService.Open(args,
       new List<ContextMenuItem> {
             new ContextMenuItem(){ Text = "Редактировать", Value = 1 },
             new ContextMenuItem(){ Text = "Удалить", Value = 2 },
         }, 
         (e) => { 
           switch (e.Value)
           {
             case 1:
               nav.NavigateTo($"/requests/edit/{args.Data.Id}", true);
               break;
             case 2:
               DeleteRequest(args.Data.Id);
               break;
           }

           //console.Log($"e: {e.Value}. args: {args.Data.Num}."); 
         }
       );
   }
}