@page "/objects"

@using System.Linq.Dynamic.Core
@using SecondVariety.Models;
@using System.Linq;
@using Object = SecondVariety.Models.Object;

@inject NavigationManager nav
@inject ContextMenuService ContextMenuService
@inject GrpcClientService grpcClient 

  <h1>Объекты</h1>
  <AuthorizeView Roles="Administrator">
    <div class="row gap-3">
      <div class="col">
        <RadzenFieldset Text="Действия" class="gap-3">
          <RadzenButton Click=@OnAddNewClick Text="Создать" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
          <RadzenButton Click=@OnEditClick Text="Редактировать" Disabled=@isSelected() Icon="save" ButtonStyle="ButtonStyle.Secondary" />
          <RadzenButton Click=@OnDeleteClick Text="Удалить" Disabled=@isSelected() Icon="report" ButtonStyle="ButtonStyle.Danger" />
        </RadzenFieldset>
      </div>
    </div>
  </AuthorizeView>
      
  <div class="row gap-3">    
    <RadzenDataGrid
        IsLoading="@isLoading"
        Count="@count"
        Data="@objects"
        AllowSorting="true"
        AllowPaging="true"
        AllowColumnPicking="true"
        ShowPagingSummary="true"
        PageSize="10"
        EmptyText="Нет данных по объектам"
        AllColumnsText="Все колонки"
        ColumnsShowingText="Колонок"
        DoesNotContainText="Нет данных по объектам"
        PagingSummaryFormat="Страница {0} из {1}"
        PagerHorizontalAlign="HorizontalAlign.Center"
        TItem="SecondVariety.Models.Object"
        SelectionMode="DataGridSelectionMode.Single" 
        @bind-Value=@selected
        CellContextMenu="@OnCellContextMenu"
        >
        <Columns>
            <RadzenDataGridColumn TItem="SecondVariety.Models.Object" Property="Kod" Title="Код" Width="25px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="SecondVariety.Models.Object" Property="Name" Title="Наименование" Width="75px" />
            <RadzenDataGridColumn TItem="SecondVariety.Models.Object" Property="LastTo" Title="Дата последнего ТО"  FormatString="{0:d}" Width="75px"/>
            <RadzenDataGridColumn TItem="SecondVariety.Models.Object" Property="NextTo" Title="Дата следующего ТО"  FormatString="{0:d}" Width="75px"/>
            <RadzenDataGridColumn TItem="SecondVariety.Models.Object" Property="DateFrom" Title="Начальная дата"  FormatString="{0:d}" Width="75px"/>
            <RadzenDataGridColumn TItem="SecondVariety.Models.Object" Property="NarFrom" Title="Начальное значение наработки" Width="60px" />
            <RadzenDataGridColumn TItem="SecondVariety.Models.Object" Property="PlanYear" Title="Планируемая наработка в год" Width="70px" />
            <RadzenDataGridColumn TItem="SecondVariety.Models.Object" Property="TekNar" Title="Текущая наработка" Width="55px" />
            <RadzenDataGridColumn TItem="SecondVariety.Models.Object" Property="SredNar" Title="Среднедневная наработка" Width="70px" />
            <RadzenDataGridColumn TItem="SecondVariety.Models.Object" Property="WarningType" Title="Предупреждение" Width="75px" >
              <Template Context="cont">
                <div style="background-color:@GetColor(cont.WarningType)">
                  <RadzenIcon Icon=@GetIcon(cont.WarningType) />
                </div>
              </Template>
            </RadzenDataGridColumn>
      <RadzenDataGridColumn TItem="Object" Property="WarningTime" FormatString="{0:d}" Title="Время предупреждения" Width="70px" />
        </Columns>
    </RadzenDataGrid>
  </div>
  <div class="row gap-3">
    <RadzenCard class="console-message">
      <span class="console-message-text">*Для редактирования таблицы, используйте правую кнопку мыши.</span>
    </RadzenCard>
  </div>
 
@code {
  [CascadingParameter]
  private Task<AuthenticationState> authenticationStateTask { get; set; }
  private System.Security.Claims.ClaimsPrincipal? User ;
  //RadzenDataGrid<SecondVariety.Models.Object> grid;
  private IEnumerable<Object> objects;
  IList<Object> selected;
  private bool isLoading = false;
  private int count;
  //EventConsole console;

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    await LoadData();
  }

  async Task LoadData()
  {
    isLoading = true;
    await Task.Yield();
    User = (await authenticationStateTask).User;
    if(!User.IsInRole("Administrator")&&!User.IsInRole("Manager")&&!User.IsInRole("Worker"))
    {
      return;
    }
    var objs = grpcClient.GetObjects() ;
    objects = objs.OrderBy(o => o.Kod) ;
    //.OrderBy(o => o.Kod); //db1context.Objects.OrderBy(o => o.Kod).AsQueryable();
    count = objects.Count();
    isLoading = false;
  }

  void OnAddNewClick()
  {
    if(User?.IsInRole("Administrator") == true)
    {
      nav.NavigateTo("/objects/new", true);
    }
  }

  void OnEditClick()
  {
    if (User?.IsInRole("Administrator") == true)
    {
      nav.NavigateTo($"/objects/edit/{selected[0].Id}", true);
    }
  }

  void OnDeleteClick()
  {
    if (User?.IsInRole("Administrator") == true)
    {
      DeleteObject(selected[0].Id);
    }
  }

  string GetColor(int? wt)
  {
    if(wt==null) return "white" ;
    switch(wt)
    {
      case 0:
        return "#96f480" ;

      case 1:
        return "#d5e969" ; 

      case 2:
        return "#f49f58" ;

      case 3:
        return "#f18989" ;

      case 4:
        return "#ed3636" ;

    }
    return "red";
  }

  string GetIcon(int? wt)
  {
    if (wt == null) return "check_circle";
    switch (wt)
    {
      case 0:
        return "check_circle";

      case 1:
        return "refresh";

      case 2:
        return "privacy_tip";

      case 3:
        return "warning_amber";

      case 4:
        return "report";

    }
    return "report";
  }

  bool isSelected()
  {
    return !(selected?.Any() == true);
  }

  void OnCellContextMenu(DataGridCellMouseEventArgs<SecondVariety.Models.Object> args)
  {
    selected = new List<SecondVariety.Models.Object>() { args.Data };
    if(User?.IsInRole("Administrator") == true)
    {

    ContextMenuService.Open(args,
        new List<ContextMenuItem> {
              //new ContextMenuItem(){ Text = "Телеметрия", Value = 1 },             
              new ContextMenuItem(){ Text = "Редактировать", Value = 2 },
              new ContextMenuItem(){ Text = "Удалить", Value = 3 },
              new ContextMenuItem(){ Text = "Обучить", Value = 4 },
              new ContextMenuItem(){ Text = "Проверить обучение", Value = 5 }
          }, 
          (e) => { 
            switch (e.Value)
            {
              case 1:
                //nav.NavigateTo($"/telemetry/{args.Data.Kod}/{startBased}/{endBased}/{(warning4?1:0)}/{args.Data.Kod}", true);
                ContextMenuService.Close() ;
                break ;
              case 2:
                nav.NavigateTo($"/objects/edit/{args.Data.Id}", true);
                ContextMenuService.Close() ;
                break;
              case 3:
                DeleteObject(args.Data.Id);
                ContextMenuService.Close() ;
                break;
              case 4:
                
                 ContextMenuService.Close() ;
                break ;
              case 5:                
                grpcClient.CheckingTrainingObj(args.Data.Kod) ;
                 ContextMenuService.Close() ;
                break;  

            }

            //console.Log($"e: {e.Value}. args: {args.Data.Num}."); 
          }
        );
     }
  }

  void DeleteObject(int Id)
  {
    grpcClient.DeleteObject(Id);
  }
}